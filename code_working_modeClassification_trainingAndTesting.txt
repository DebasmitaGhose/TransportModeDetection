import csv
import numpy as np

f1 = file('C:\\Users\\User\\Documents\\Final Year Project @ NTU\\NTU\\sample_train.csv','r')
f2 = file('C:\\Users\\User\\Documents\\Final Year Project @ NTU\\NTU\\sample_test.csv','r')

c1=csv.reader(f1)
c2=csv.reader(f2)

#--------------------------------------------------------------------------------------------------------------

#Header contains feature names
row_train=next(c1)                 #training data
feature_names_train=np.array(row_train)
#print feature_names_train 

row_test=next(c2)                  #testing data
feature_names_test=np.array(row_test)
#print feature_names_test

#---------------------------------------------------------------------------------------------------------------

#load dataset and target classes
mode_X_train,mode_y_train=[],[]    
mode_X_test,mode_y_test=[],[]

for row_train in c1:              #training data
    mode_X_train.append(row_train)
    mode_y_train.append(row_train[8])
mode_X_train = np.array(mode_X_train)
mode_y_train = np.array(mode_y_train)
#print mode_X_train
#print mode_y_train[1]

for row_test in c2:               #testing data
    mode_X_test.append(row_test)
    mode_y_test.append(row_test[8])
mode_X_test = np.array(mode_X_test)
mode_y_test = np.array(mode_y_test)
#print mode_X_test
#print mode_y_test[1]

#----------------------------------------------------------------------------------------------------------------

#retain required columns
mode_X_train = mode_X_train[:, [6,7]]   #training data
feature_names_train = feature_names_train[[6,7]]
#print feature_names_train
#print mode_X_train

mode_X_test = mode_X_test[:, [6,7]]     #testing data
feature_names_test = feature_names_test[[6,7]]
#print feature_names_test
#print mode_X_test

#-----------------------------------------------------------------------------------------------------------------

#encode mode
from sklearn.preprocessing import LabelEncoder
enc = LabelEncoder()

label_encoder_train = enc.fit(mode_y_train[:])       #training data
print("Categorical Classes Training:", label_encoder_train.classes_)
integer_classes_train = label_encoder_train.transform(label_encoder_train.classes_)
print("Integer Classes Training:", integer_classes_train)
t_1 = label_encoder_train.transform(mode_y_train[:])
mode_y_train[:] = t_1
#print (mode_X_train[4], mode_y_train[4])

label_encoder_test = enc.fit(mode_y_test[:])       #testing data
print("Categorical Classes Testing:", label_encoder_test.classes_)
integer_classes_test = label_encoder_test.transform(label_encoder_test.classes_)
print("Integer Classes Testing:", integer_classes_test)
t_2 = label_encoder_test.transform(mode_y_test[:])
mode_y_test[:] = t_2
#print (mode_X_test[4], mode_y_test[4])

#------------------------------------------------------------------------------------------------------------------

#decision tree
from sklearn import tree
clf = tree.DecisionTreeClassifier(criterion='entropy', max_depth=3, min_samples_leaf=5)
clf = clf.fit(mode_X_train,mode_y_train) 
#print clf.predict(mode_X_test)

#-------------------------------------------------------------------------------------------------------------------

#function to calculate classification accuracy
from sklearn import metrics
    
def measure_performance(X,y,clf, show_accuracy=True, show_classification_report=True, show_confusion_matrix=True):
    y_pred=clf.predict(X)
    if show_accuracy:
        print("Accuracy:{0:.3f}".format(metrics.accuracy_score(y,y_pred)),"\n")
    if show_classification_report:
        print("Classification Report")
        print(metrics.classification_report(y,y_pred),"\n")
    if show_confusion_matrix:
        print("Confusion Matrix")
        print(metrics.confusion_matrix(y,y_pred),"\n")
    
measure_performance(mode_X_train,mode_y_train,clf, show_accuracy=True, show_classification_report=True, show_confusion_matrix=True)

#-------------------------------------------------------------------------------------------------------------------

#evaluating the performance of the decision tree on the testing data
clf_dt = tree.DecisionTreeClassifier(criterion='entropy', max_depth=3, min_samples_leaf=5)
clf_dt.fit(mode_X_test, mode_y_test)
measure_performance(mode_X_test, mode_y_test,clf_dt)